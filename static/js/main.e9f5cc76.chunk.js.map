{"version":3,"sources":["Cell.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","r","nrows","c","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","concat","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","newBoard","checkForWin","setState","_this2","row","rIdx","key","cell","cIdx","src_Cell_0","defaultProps","Game","src_Board_0","App","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9f5cc76.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props);\n\n    // set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    \n    // create array-of-arrays of true/false values\n    for(let r=0; r < this.props.nrows; r++){\n      board[r] = [];\n      for(let c=0; c < this.props.ncols; c++){\n          board[r].push(false);\n      }\n    }\n    for(let r=0; r < this.props.nrows; r++){\n      for(let c=0; c < this.props.ncols; c++){\n        if(Math.random() < this.props.chanceLightStartsOn){\n          this.flipCellsAround(board, `${r}-${c}`)\n        }\n      }\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(board, coord) {\n    let {ncols, nrows} = this.props;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // flip this cell and the cells around it\n    flipCell(y, x);\n    (y - 1 > -1) && flipCell(y - 1, x);\n    (y + 1 < nrows) && flipCell(y + 1, x);\n    (x - 1 > -1) && flipCell(y, x - 1);\n    (x + 1 < ncols) && flipCell(y, x + 1);\n    \n    return board;\n  }\n\n  handleClick(coord) {\n    let newBoard = this.flipCellsAround(this.state.board, coord);\n\n    // win when every cell is turned off\n    // determine if the game has been won\n    this.checkForWin(newBoard);\n\n    this.setState({board: newBoard});\n  }\n\n  checkForWin(board) {\n    for(let r=0; r < this.props.nrows; r++){\n      for(let c=0; c < this.props.ncols; c++){\n        if(board[r][c] === true){\n          return false;\n        }\n      }\n    }\n    this.setState({hasWon: true});\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    return(\n      <div className=\"Board\">\n        { this.state.hasWon &&  <p>You win!</p> }\n        { !this.state.hasWon &&  \n          <table><tbody>{ this.state.board.map( (row, rIdx) => {\n            return<tr key={`row-${rIdx}`}>{row.map( (cell, cIdx) => {\n                return<Cell \n                    key={`${rIdx}-${cIdx}`} \n                    isLit={ cell } \n                    flipCellsAroundMe={ () => this.handleClick(`${rIdx}-${cIdx}`)} \n                  />\n            })}\n            </tr>\n          }) \n        }</tbody></table>\n        } \n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from 'react'\nimport Board from \"./Board\"\nimport \"./Game.css\"\n\nclass Game extends Component {\n  render(){\n    return(\n        <Board/>\n    )\n  }\n}\n\nexport default Game","import React, {Component} from 'react';\nimport Game from './Game';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Game/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}